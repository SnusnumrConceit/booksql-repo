"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")

    books: [Book!]! @paginate(type: "paginator" model: "App\\Models\\Book")
    book(id: ID @eq): Book @find(model: "App\\Models\\Book")

    categories: [Category!]! @paginate(type: "paginator" model: "App\\Models\\Category")
    category(id: ID @eq): Category @find(model: "App\\Models\\Category")
}

# type Mutation {
#     createUser(
#         name: String! @rules(apply: ["required", "min:4"]),
#         email: String! @rules(apply: ["required', "min:10", "email"]),
#         password: String! @bcrypt @rules(apply: ["required", "min:8"])
#     ): User @create
#     updateUser(
#         id: ID! @rules(apply: ["required"]),
#         name: String! @rules(apply: ["required", "min:4"]),
#         email: String! @rules(apply: ["required', "min:10", "email"])        
#     ): User @update
#     deleteUser(
#         id: ID! @rules(apply: ["required"])
#     ): User @delete(model: "App\\User")
# }

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Book {
    id: ID!
    title: String!
    description: String!
    year: Int!
    created_at: DateTime!
    updated_at: DateTime!
    authors: [Author!]! @belongsTo
}

type Author {
    id: ID!
    last_name: String!
    first_name: String!
    middle_name: String!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    books: [Book!]! @hasMany
}

type Category {
    id: ID!
    name: String!
    books: [Book!]! @hasMany
}